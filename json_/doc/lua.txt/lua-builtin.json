{
 "leftTitle": "VIM",
 "rightTitle": "lua-builtin",
 "description": "",
 "data": [
  {
   "type": "func",
   "name": "vim.api.{func}",
   "description": "        Invokes Nvim |API| function {func} with arguments {...}.\n        Example: call the \"nvim_get_current_line()\" API function: >\n            print(tostring(vim.api.nvim_get_current_line()))",
   "argsStr": "{...}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "vim.version",
   "description": "        Gets the version of the current Nvim build.",
   "argsStr": "",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "vim.in_fast_event",
   "description": "        Returns true if the code is executing as part of a \"fast\" event\n        handler, where most of the API is disabled. These are low-level events\n        (e.g. |lua-loop-callbacks|) which can be invoked whenever Nvim polls\n        for input.  When this is `false` most API functions are callable (but\n        may be subject to other restrictions such as |textlock|).",
   "argsStr": "",
   "returnType": "any"
  },
  {
   "type": "value",
   "name": "vim.NIL",
   "description": "        Special value representing NIL in |RPC| and |v:null| in Vimscript\n        conversion, and similar cases. Lua `nil` cannot be used as part of\n        a Lua table representing a Dictionary or Array, because it is\n        treated as missing: `{\"foo\", nil}` is the same as `{\"foo\"}`.",
   "valuetype": "any"
  },
  {
   "type": "func",
   "name": "vim.empty_dict",
   "description": "        Creates a special empty table (marked with a metatable), which Nvim\n        converts to an empty dictionary when translating Lua values to\n        Vimscript or API types. Nvim by default converts an empty table `{}`\n        without this metatable to an list/array.\n\n        Note: if numeric keys are present in the table, Nvim ignores the\n        metatable marker and converts the dict to a list/array anyway.",
   "argsStr": "",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "vim.rpcnotify",
   "description": "        Sends {event} to {channel} via |RPC| and returns immediately. If\n        {channel} is 0, the event is broadcast to all channels.\n\n        This function also works in a fast callback |lua-loop-callbacks|.",
   "argsStr": "{channel}, {method}[, {args}...]",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "vim.rpcrequest",
   "description": "        Sends a request to {channel} to invoke {method} via |RPC| and blocks\n        until a response is received.\n\n        Note: NIL values as part of the return value is represented as\n        |vim.NIL| special value",
   "argsStr": "{channel}, {method}[, {args}...]",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "vim.stricmp",
   "description": "        Compares strings case-insensitively.  Returns 0, 1 or -1 if strings\n        are equal, {a} is greater than {b} or {a} is lesser than {b},\n        respectively.",
   "argsStr": "{a}, {b}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "vim.str_utfindex",
   "description": "        Convert byte index to UTF-32 and UTF-16 indicies. If {index} is not\n        supplied, the length of the string is used. All indicies are zero-based.\n        Returns two values: the UTF-32 and UTF-16 indicies respectively.\n\n        Embedded NUL bytes are treated as terminating the string. Invalid\n        UTF-8 bytes, and embedded surrogates are counted as one code\n        point each. An {index} in the middle of a UTF-8 sequence is rounded\n        upwards to the end of that sequence.",
   "argsStr": "{str}[, {index}]",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "vim.str_byteindex",
   "description": "        Convert UTF-32 or UTF-16 {index} to byte index. If {use_utf16} is not\n        supplied, it defaults to false (use UTF-32). Returns the byte index.\n\n        Invalid UTF-8 and NUL is treated like by |vim.str_byteindex()|. An {index}\n        in the middle of a UTF-16 sequence is rounded upwards to the end of that\n        sequence.",
   "argsStr": "{str}, {index}[, {use_utf16}]",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "vim.schedule",
   "description": "        Schedules {callback} to be invoked soon by the main event-loop. Useful\n        to avoid |textlock| or other temporary restrictions.",
   "argsStr": "{callback}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "vim.defer_fn",
   "description": "    Defers calling {fn} until {timeout} ms passes.  Use to do a one-shot timer\n    that calls {fn}.\n\n    Note: The {fn} is |schedule_wrap|ped automatically, so API functions are\n    safe to call.\n\n    Parameters: ~\n        {fn}        Callback to call once {timeout} expires\n        {timeout}   Time in ms to wait before calling {fn}\n\n    Returns: ~\n        |vim.loop|.new_timer() object",
   "argsStr": "{fn}, {timeout}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "vim.wait",
   "description": "        Wait for {time} in milliseconds until {callback} returns `true`.\n\n        Executes {callback} immediately and at approximately {interval}\n        milliseconds (default 200). Nvim still processes other events during\n        this time.\n\n    Parameters: ~\n        {time}      Number of milliseconds to wait\n        {callback}  Optional callback. Waits until {callback} returns true\n        {interval}  (Approximate) number of milliseconds to wait between polls\n        {fast_only} If true, only |api-fast| events will be processed.\n                        If called from while in an |api-fast| event, will\n                        automatically be set to `true`.\n\n    Returns: ~\n        If {callback} returns `true` during the {time}:\n            `true, nil`\n\n        If {callback} never returns `true` during the {time}:\n            `false, -1`\n\n        If {callback} is interrupted during the {time}:\n            `false, -2`\n\n        If {callback} errors, the error is raised.\n\n        Examples: >\n\n    ---\n    -- Wait for 100 ms, allowing other events to process\n    vim.wait(100, function() end)\n\n    ---\n    -- Wait for 100 ms or until global variable set.\n    vim.wait(100, function() return vim.g.waiting_for_var end)\n\n    ---\n    -- Wait for 1 second or until global variable set, checking every ~500 ms\n    vim.wait(1000, function() return vim.g.waiting_for_var end, 500)\n\n    ---\n    -- Schedule a function to set a value in 100ms\n    vim.defer_fn(function() vim.g.timer_result = true end, 100)\n\n    -- Would wait ten seconds if results blocked. Actually only waits  100 ms\n    if vim.wait(10000, function() return vim.g.timer_result end) then\n      print('Only waiting a little bit of time!')\n    end\n<",
   "argsStr": "{time} [, {callback}, {interval}, {fast_only}]",
   "returnType": "any"
  },
  {
   "type": "value",
   "name": "vim.type_idx",
   "description": "        Type index for use in |lua-special-tbl|.  Specifying one of the values\n        from |vim.types| allows typing the empty table (it is unclear whether\n        empty Lua table represents empty list or empty array) and forcing\n        integral numbers to be |Float|.  See |lua-special-tbl| for more\n        details.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "vim.val_idx",
   "description": "        Value index for tables representing |Float|s.  A table representing\n        floating-point value 1.0 looks like this: >\n            {\n              [vim.type_idx] = vim.types.float,\n              [vim.val_idx] = 1.0,\n            }\n<       See also |vim.type_idx| and |lua-special-tbl|.",
   "valuetype": "any"
  },
  {
   "type": "value",
   "name": "vim.types",
   "description": "        Table with possible values for |vim.type_idx|.  Contains two sets of\n        key-value pairs: first maps possible values for |vim.type_idx| to\n        human-readable strings, second maps human-readable type names to\n        values for |vim.type_idx|.  Currently contains pairs for `float`,\n        `array` and `dictionary` types.\n\n        Note: one must expect that values corresponding to `vim.types.float`,\n        `vim.types.array` and `vim.types.dictionary` fall under only two\n        following assumptions:\n        1. Value may serve both as a key and as a value in a table.  Given the\n           properties of Lua tables this basically means “value is not `nil`”.\n        2. For each value in `vim.types` table `vim.types[vim.types[value]]`\n           is the same as `value`.\n        No other restrictions are put on types, and it is not guaranteed that\n        values corresponding to `vim.types.float`, `vim.types.array` and\n        `vim.types.dictionary` will not change or that `vim.types` table will\n        only contain values for these three types.",
   "valuetype": "any"
  }
 ]
}