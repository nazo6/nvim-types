{
 "leftTitle": "3. Functions",
 "rightTitle": "sign-functions-details",
 "description": "",
 "data": [
  {
   "type": "func",
   "name": "sign_define",
   "description": "sign_define({list})\n\t\tDefine a new sign named {name} or modify the attributes of an\n\t\texisting sign.  This is similar to the |:sign-define| command.\n\n\t\tPrefix {name} with a unique text to avoid name collisions.\n\t\tThere is no {group} like with placing signs.\n\n\t\tThe {name} can be a String or a Number.  The optional {dict}\n\t\targument specifies the sign attributes.  The following values\n\t\tare supported:\n\t\t   icon\t\tfull path to the bitmap file for the sign.\n\t\t   linehl\thighlight group used for the whole line the\n\t\t\t\tsign is placed in.\n\t\t   text\t\ttext that is displayed when there is no icon\n\t\t\t\tor the GUI is not being used.\n\t\t   texthl\thighlight group used for the text item\n\t\t   numhl\thighlight group used for 'number' column at the\n\t\t\t\tassociated line. Overrides |hl-LineNr|,\n\t\t\t\t|hl-CursorLineNr|.\n\n\t\tIf the sign named {name} already exists, then the attributes\n\t\tof the sign are updated.\n\n\t\tThe one argument {list} can be used to define a list of signs.\n\t\tEach list item is a dictionary with the above items in {dict}\n\t\tand a \"name\" item for the sign name.\n\n\t\tReturns 0 on success and -1 on failure.  When the one argument\n\t\t{list} is used, then returns a List of values one for each\n\t\tdefined sign.\n\n\t\tExamples: >\n\t\t\tcall sign_define(\"mySign\", {\n\t\t\t\t\\ \"text\" : \"=>\",\n\t\t\t\t\\ \"texthl\" : \"Error\",\n\t\t\t\t\\ \"linehl\" : \"Search\"})\n\t\t\tcall sign_define([\n\t\t\t\t\\ {'name' : 'sign1',\n\t\t\t\t\\  'text' : '=>'},\n\t\t\t\t\\ {'name' : 'sign2',\n\t\t\t\t\\  'text' : '!!'}\n\t\t\t\t\\ ])\n<",
   "argsStr": "{name} [, {dict}]",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "sign_getdefined",
   "description": "\t\tGet a list of defined signs and their attributes.\n\t\tThis is similar to the |:sign-list| command.\n\n\t\tIf the {name} is not supplied, then a list of all the defined\n\t\tsigns is returned. Otherwise the attribute of the specified\n\t\tsign is returned.\n\n\t\tEach list item in the returned value is a dictionary with the\n\t\tfollowing entries:\n\t\t   icon\t\tfull path to the bitmap file of the sign\n\t\t   linehl\thighlight group used for the whole line the\n\t\t\t\tsign is placed in.\n\t\t   name\t\tname of the sign\n\t\t   text\t\ttext that is displayed when there is no icon\n\t\t\t\tor the GUI is not being used.\n\t\t   texthl\thighlight group used for the text item\n\t\t   numhl\thighlight group used for 'number' column at the\n\t\t\t\tassociated line. Overrides |hl-LineNr|,\n\t\t\t\t|hl-CursorLineNr|.\n\n\t\tReturns an empty List if there are no signs and when {name} is\n\t\tnot found.\n\n\t\tExamples: >\n\t\t\t\" Get a list of all the defined signs\n\t\t\techo sign_getdefined()\n\n\t\t\t\" Get the attribute of the sign named mySign\n\t\t\techo sign_getdefined(\"mySign\")\n<",
   "argsStr": "[{name}]",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "sign_getplaced",
   "description": "\t\tReturn a list of signs placed in a buffer or all the buffers.\n\t\tThis is similar to the |:sign-place-list| command.\n\n\t\tIf the optional buffer name {buf} is specified, then only the\n\t\tlist of signs placed in that buffer is returned.  For the use\n\t\tof {buf}, see |bufname()|. The optional {dict} can contain\n\t\tthe following entries:\n\t\t   group\tselect only signs in this group\n\t\t   id\t\tselect sign with this identifier\n\t\t   lnum\t\tselect signs placed in this line. For the use\n\t\t\t\tof {lnum}, see |line()|.\n\t\tIf {group} is '*', then signs in all the groups including the\n\t\tglobal group are returned. If {group} is not supplied or is an\n\t\tempty string, then only signs in the global group are\n\t\treturned.  If no arguments are supplied, then signs in the\n\t\tglobal group placed in all the buffers are returned.\n\t\tSee |sign-group|.\n\n\t\tEach list item in the returned value is a dictionary with the\n\t\tfollowing entries:\n\t\t\tbufnr\tnumber of the buffer with the sign\n\t\t\tsigns\tlist of signs placed in {bufnr}. Each list\n\t\t\t\titem is a dictionary with the below listed\n\t\t\t\tentries\n\n\t\tThe dictionary for each sign contains the following entries:\n\t\t\tgroup\t sign group. Set to '' for the global group.\n\t\t\tid\t identifier of the sign\n\t\t\tlnum\t line number where the sign is placed\n\t\t\tname\t name of the defined sign\n\t\t\tpriority sign priority\n\n\t\tThe returned signs in a buffer are ordered by their line\n\t\tnumber and priority.\n\n\t\tReturns an empty list on failure or if there are no placed\n\t\tsigns.\n\n\t\tExamples: >\n\t\t\t\" Get a List of signs placed in eval.c in the\n\t\t\t\" global group\n\t\t\techo sign_getplaced(\"eval.c\")\n\n\t\t\t\" Get a List of signs in group 'g1' placed in eval.c\n\t\t\techo sign_getplaced(\"eval.c\", {'group' : 'g1'})\n\n\t\t\t\" Get a List of signs placed at line 10 in eval.c\n\t\t\techo sign_getplaced(\"eval.c\", {'lnum' : 10})\n\n\t\t\t\" Get sign with identifier 10 placed in a.py\n\t\t\techo sign_getplaced(\"a.py\", {'id' : 10})\n\n\t\t\t\" Get sign with id 20 in group 'g1' placed in a.py\n\t\t\techo sign_getplaced(\"a.py\", {'group' : 'g1',\n\t\t\t\t\t\t\t\\  'id' : 20})\n\n\t\t\t\" Get a List of all the placed signs\n\t\t\techo sign_getplaced()\n<",
   "argsStr": "[{buf} [, {dict}]]",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "sign_jump",
   "description": "\t\tOpen the buffer {buf} or jump to the window that contains\n\t\t{buf} and position the cursor at sign {id} in group {group}.\n\t\tThis is similar to the |:sign-jump| command.\n\n\t\tFor the use of {buf}, see |bufname()|.\n\n\t\tReturns the line number of the sign. Returns -1 if the\n\t\targuments are invalid.\n\n\t\tExample: >\n\t\t\t\" Jump to sign 10 in the current buffer\n\t\t\tcall sign_jump(10, '', '')\n<",
   "argsStr": "{id}, {group}, {buf}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "sign_place",
   "description": "\t\tPlace the sign defined as {name} at line {lnum} in file or\n\t\tbuffer {buf} and assign {id} and {group} to sign.  This is\n\t\tsimilar to the |:sign-place| command.\n\n\t\tIf the sign identifier {id} is zero, then a new identifier is\n\t\tallocated.  Otherwise the specified number is used. {group} is\n\t\tthe sign group name. To use the global sign group, use an\n\t\tempty string.  {group} functions as a namespace for {id}, thus\n\t\ttwo groups can use the same IDs. Refer to |sign-identifier|\n\t\tand |sign-group| for more information.\n\n\t\t{name} refers to a defined sign.\n\t\t{buf} refers to a buffer name or number. For the accepted\n\t\tvalues, see |bufname()|.\n\n\t\tThe optional {dict} argument supports the following entries:\n\t\t\tlnum\t\tline number in the file or buffer\n\t\t\t\t\t{buf} where the sign is to be placed.\n\t\t\t\t\tFor the accepted values, see |line()|.\n\t\t\tpriority\tpriority of the sign. See\n\t\t\t\t\t|sign-priority| for more information.\n\n\t\tIf the optional {dict} is not specified, then it modifies the\n\t\tplaced sign {id} in group {group} to use the defined sign\n\t\t{name}.\n\n\t\tReturns the sign identifier on success and -1 on failure.\n\n\t\tExamples: >\n\t\t\t\" Place a sign named sign1 with id 5 at line 20 in\n\t\t\t\" buffer json.c\n\t\t\tcall sign_place(5, '', 'sign1', 'json.c',\n\t\t\t\t\t\t\t\\ {'lnum' : 20})\n\n\t\t\t\" Updates sign 5 in buffer json.c to use sign2\n\t\t\tcall sign_place(5, '', 'sign2', 'json.c')\n\n\t\t\t\" Place a sign named sign3 at line 30 in\n\t\t\t\" buffer json.c with a new identifier\n\t\t\tlet id = sign_place(0, '', 'sign3', 'json.c',\n\t\t\t\t\t\t\t\\ {'lnum' : 30})\n\n\t\t\t\" Place a sign named sign4 with id 10 in group 'g3'\n\t\t\t\" at line 40 in buffer json.c with priority 90\n\t\t\tcall sign_place(10, 'g3', 'sign4', 'json.c',\n\t\t\t\t\t\\ {'lnum' : 40, 'priority' : 90})\n<",
   "argsStr": "{id}, {group}, {name}, {buf} [, {dict}]",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "sign_placelist",
   "description": "\t\tPlace one or more signs.  This is similar to the\n\t\t|sign_place()| function.  The {list} argument specifies the\n\t\tList of signs to place. Each list item is a dict with the\n\t\tfollowing sign attributes:\n\t\t    buffer\tbuffer name or number. For the accepted\n\t\t\t\tvalues, see |bufname()|.\n\t\t    group\tsign group. {group} functions as a namespace\n\t\t\t\tfor {id}, thus two groups can use the same\n\t\t\t\tIDs. If not specified or set to an empty\n\t\t\t\tstring, then the global group is used.   See\n\t\t\t\t|sign-group| for more information.\n\t\t    id\t\tsign identifier. If not specified or zero,\n\t\t\t\tthen a new unique identifier is allocated.\n\t\t\t\tOtherwise the specified number is used. See\n\t\t\t\t|sign-identifier| for more information.\n\t\t    lnum\tline number in the buffer {buf} where the\n\t\t\t\tsign is to be placed. For the accepted values,\n\t\t\t\tsee |line()|.\n\t\t    name\tname of the sign to place. See |sign_define()|\n\t\t    \t\tfor more information.\n\t\t    priority\tpriority of the sign. When multiple signs are\n\t\t\t\tplaced on a line, the sign with the highest\n\t\t\t\tpriority is used. If not specified, the\n\t\t\t\tdefault value of 10 is used. See\n\t\t\t\t|sign-priority| for more information.\n\n\t\tIf {id} refers to an existing sign, then the existing sign is\n\t\tmodified to use the specified {name} and/or {priority}.\n\n\t\tReturns a List of sign identifiers. If failed to place a\n\t\tsign, the corresponding list item is set to -1.\n\n\t\tExamples: >\n\t\t\t\" Place sign s1 with id 5 at line 20 and id 10 at line\n\t\t\t\" 30 in buffer a.c\n\t\t\tlet [n1, n2] = sign_placelist([\n\t\t\t\t\\ {'id' : 5,\n\t\t\t\t\\  'name' : 's1',\n\t\t\t\t\\  'buffer' : 'a.c',\n\t\t\t\t\\  'lnum' : 20},\n\t\t\t\t\\ {'id' : 10,\n\t\t\t\t\\  'name' : 's1',\n\t\t\t\t\\  'buffer' : 'a.c',\n\t\t\t\t\\  'lnum' : 30}\n\t\t\t\t\\ ])\n\n\t\t\t\" Place sign s1 in buffer a.c at line 40 and 50\n\t\t\t\" with auto-generated identifiers\n\t\t\tlet [n1, n2] = sign_placelist([\n\t\t\t\t\\ {'name' : 's1',\n\t\t\t\t\\  'buffer' : 'a.c',\n\t\t\t\t\\  'lnum' : 40},\n\t\t\t\t\\ {'name' : 's1',\n\t\t\t\t\\  'buffer' : 'a.c',\n\t\t\t\t\\  'lnum' : 50}\n\t\t\t\t\\ ])\n<",
   "argsStr": "{list}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "sign_undefine",
   "description": "sign_undefine({list})\n\t\tDeletes a previously defined sign {name}. This is similar to\n\t\tthe |:sign-undefine| command. If {name} is not supplied, then\n\t\tdeletes all the defined signs.\n\n\t\tThe one argument {list} can be used to undefine a list of\n\t\tsigns. Each list item is the name of a sign.\n\n\t\tReturns 0 on success and -1 on failure.  For the one argument\n\t\t{list} call, returns a list of values one for each undefined\n\t\tsign.\n\n\t\tExamples: >\n\t\t\t\" Delete a sign named mySign\n\t\t\tcall sign_undefine(\"mySign\")\n\n\t\t\t\" Delete signs 'sign1' and 'sign2'\n\t\t\tcall sign_undefine([\"sign1\", \"sign2\"])\n\n\t\t\t\" Delete all the signs\n\t\t\tcall sign_undefine()\n<",
   "argsStr": "[{name}]",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "sign_unplace",
   "description": "\t\tRemove a previously placed sign in one or more buffers.  This\n\t\tis similar to the |:sign-unplace| command.\n\n\t\t{group} is the sign group name. To use the global sign group,\n\t\tuse an empty string.  If {group} is set to '*', then all the\n\t\tgroups including the global group are used.\n\t\tThe signs in {group} are selected based on the entries in\n\t\t{dict}.  The following optional entries in {dict} are\n\t\tsupported:\n\t\t\tbuffer\tbuffer name or number. See |bufname()|.\n\t\t\tid\tsign identifier\n\t\tIf {dict} is not supplied, then all the signs in {group} are\n\t\tremoved.\n\n\t\tReturns 0 on success and -1 on failure.\n\n\t\tExamples: >\n\t\t\t\" Remove sign 10 from buffer a.vim\n\t\t\tcall sign_unplace('', {'buffer' : \"a.vim\", 'id' : 10})\n\n\t\t\t\" Remove sign 20 in group 'g1' from buffer 3\n\t\t\tcall sign_unplace('g1', {'buffer' : 3, 'id' : 20})\n\n\t\t\t\" Remove all the signs in group 'g2' from buffer 10\n\t\t\tcall sign_unplace('g2', {'buffer' : 10})\n\n\t\t\t\" Remove sign 30 in group 'g3' from all the buffers\n\t\t\tcall sign_unplace('g3', {'id' : 30})\n\n\t\t\t\" Remove all the signs placed in buffer 5\n\t\t\tcall sign_unplace('*', {'buffer' : 5})\n\n\t\t\t\" Remove the signs in group 'g4' from all the buffers\n\t\t\tcall sign_unplace('g4')\n\n\t\t\t\" Remove sign 40 from all the buffers\n\t\t\tcall sign_unplace('*', {'id' : 40})\n\n\t\t\t\" Remove all the placed signs from all the buffers\n\t\t\tcall sign_unplace('*')\n<",
   "argsStr": "{group} [, {dict}]",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "sign_unplacelist",
   "description": "\t\tRemove previously placed signs from one or more buffers.  This\n\t\tis similar to the |sign_unplace()| function.\n\n\t\tThe {list} argument specifies the List of signs to remove.\n\t\tEach list item is a dict with the following sign attributes:\n\t\t    buffer\tbuffer name or number. For the accepted\n\t\t\t\tvalues, see |bufname()|. If not specified,\n\t\t\t\tthen the specified sign is removed from all\n\t\t\t\tthe buffers.\n\t\t    group\tsign group name. If not specified or set to an\n\t\t\t\tempty string, then the global sign group is\n\t\t\t\tused. If set to '*', then all the groups\n\t\t\t\tincluding the global group are used.\n\t\t    id\t\tsign identifier. If not specified, then all\n\t\t\t\tthe signs in the specified group are removed.\n\n\t\tReturns a List where an entry is set to 0 if the corresponding\n\t\tsign was successfully removed or -1 on failure.\n\n\t\tExample: >\n\t\t\t\" Remove sign with id 10 from buffer a.vim and sign\n\t\t\t\" with id 20 from buffer b.vim\n\t\t\tcall sign_unplacelist([\n\t\t\t\t\\ {'id' : 10, 'buffer' : \"a.vim\"},\n\t\t\t\t\\ {'id' : 20, 'buffer' : 'b.vim'},\n\t\t\t\t\\ ])\n<\n\n vim:tw=78:ts=8:noet:ft=help:norl:",
   "argsStr": "{list}",
   "returnType": "any"
  }
 ]
}