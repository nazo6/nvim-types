{
 "leftTitle": "Lua module: vim.lsp",
 "rightTitle": "lsp-core",
 "description": "",
 "data": [
  {
   "type": "func",
   "name": "buf_attach_client",
   "description": "                Implements the `textDocument/did…` notifications required to\n                track a buffer for any language server.\n\n                Without calling this, the server won't be notified of changes\n                to a buffer.\n\n                Parameters: ~\n                    {bufnr}      (number) Buffer handle, or 0 for current\n                    {client_id}  (number) Client id",
   "argsStr": "{bufnr}, {client_id}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "buf_get_clients",
   "description": "                Gets a map of client_id:client pairs for the given buffer,\n                where each value is a |vim.lsp.client| object.\n\n                Parameters: ~\n                    {bufnr}  (optional, number): Buffer handle, or 0 for\n                             current",
   "argsStr": "{bufnr}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "buf_is_attached",
   "description": "                Checks if a buffer is attached for a particular client.\n\n                Parameters: ~\n                    {bufnr}      (number) Buffer handle, or 0 for current\n                    {client_id}  (number) the client id",
   "argsStr": "{bufnr}, {client_id}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "buf_notify",
   "description": "                Send a notification to a server\n\n                Parameters: ~\n                    {bufnr}   [number] (optional): The number of the buffer\n                    {method}  [string]: Name of the request method\n                    {params}  [string]: Arguments to send to the server\n\n                Return: ~\n                    true if any client returns true; false otherwise",
   "argsStr": "{bufnr}, {method}, {params}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "buf_request",
   "description": "                Sends an async request for all active clients attached to the\n                buffer.\n\n                Parameters: ~\n                    {bufnr}    (number) Buffer handle, or 0 for current.\n                    {method}   (string) LSP method name\n                    {params}   (optional, table) Parameters to send to the\n                               server\n                    {handler}  (optional, function) See |lsp-handler|\n\n                Return: ~\n                    2-tuple:\n                    • Map of client-id:request-id pairs for all successful\n                      requests.\n                    • Function which can be used to cancel all the requests.\n                      You could instead iterate all clients and call their\n                      `cancel_request()` methods.",
   "argsStr": "{bufnr}, {method}, {params}, {handler}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "buf_request_all",
   "description": "                Sends an async request for all active clients attached to the\n                buffer. Executes the callback on the combined result.\n                Parameters are the same as |vim.lsp.buf_request()| but the\n                return result and callback are different.\n\n                Parameters: ~\n                    {bufnr}     (number) Buffer handle, or 0 for current.\n                    {method}    (string) LSP method name\n                    {params}    (optional, table) Parameters to send to the\n                                server\n                    {callback}  (function) The callback to call when all\n                                requests are finished.\n\n                Return: ~\n                    (function) A function that will cancel all requests which\n                    is the same as the one returned from `buf_request` .",
   "argsStr": "{bufnr}, {method}, {params}, {callback}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "buf_request_sync",
   "description": "                Sends a request to all server and waits for the response of\n                all of them.\n\n                Calls |vim.lsp.buf_request_all()| but blocks Nvim while\n                awaiting the result. Parameters are the same as\n                |vim.lsp.buf_request()| but the return result is different.\n                Wait maximum of {timeout_ms} (default 1000) ms.\n\n                Parameters: ~\n                    {bufnr}       (number) Buffer handle, or 0 for current.\n                    {method}      (string) LSP method name\n                    {params}      (optional, table) Parameters to send to the\n                                  server\n                    {timeout_ms}  (optional, number, default=1000) Maximum\n                                  time in milliseconds to wait for a result.\n\n                Return: ~\n                    Map of client_id:request_result. On timeout, cancel or\n                    error, returns `(nil, err)` where `err` is a string\n                    describing the failure reason.",
   "argsStr": "{bufnr}, {method}, {params}, {timeout_ms}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "client",
   "description": "                LSP client object. You can get an active client object via\n                |vim.lsp.get_client_by_id()| or\n                |vim.lsp.get_active_clients()|.\n\n                • Methods:\n                  • request(method, params, [handler], bufnr) Sends a request\n                    to the server. This is a thin wrapper around\n                    {client.rpc.request} with some additional checking. If\n                    {handler} is not specified, If one is not found there,\n                    then an error will occur. Returns: {status},\n                    {[client_id]}. {status} is a boolean indicating if the\n                    notification was successful. If it is `false` , then it\n                    will always be `false` (the client has shutdown). If\n                    {status} is `true` , the function returns {request_id} as\n                    the second result. You can use this with\n                    `client.cancel_request(request_id)` to cancel the request.\n                  • request_sync(method, params, timeout_ms, bufnr) Sends a\n                    request to the server and synchronously waits for the\n                    response. This is a wrapper around {client.request}\n                    Returns: { err=err, result=result }, a dictionary, where\n                    `err` and `result` come from the |lsp-handler|. On\n                    timeout, cancel or error, returns `(nil, err)` where `err`\n                    is a string describing the failure reason. If the request\n                    was unsuccessful returns `nil` .\n                  • notify(method, params) Sends a notification to an LSP\n                    server. Returns: a boolean to indicate if the notification\n                    was successful. If it is false, then it will always be\n                    false (the client has shutdown).\n                  • cancel_request(id) Cancels a request with a given request\n                    id. Returns: same as `notify()` .\n                  • stop([force]) Stops a client, optionally with force. By\n                    default, it will just ask the server to shutdown without\n                    force. If you request to stop a client which has\n                    previously been requested to shutdown, it will\n                    automatically escalate and force shutdown.\n                  • is_stopped() Checks whether a client is stopped. Returns:\n                    true if the client is fully stopped.\n                  • on_attach(client, bufnr) Runs the on_attach function from\n                    the client's config if it was defined. Useful for\n                    buffer-local setup.\n\n                • Members\n                  • {id} (number): The id allocated to the client.\n                  • {name} (string): If a name is specified on creation, that\n                    will be used. Otherwise it is just the client id. This is\n                    used for logs and messages.\n                  • {rpc} (table): RPC client object, for low level\n                    interaction with the client. See |vim.lsp.rpc.start()|.\n                  • {offset_encoding} (string): The encoding used for\n                    communicating with the server. You can modify this in the\n                    `config` 's `on_init` method before text is sent to the\n                    server.\n                  • {handlers} (table): The handlers used by the client as\n                    described in |lsp-handler|.\n                  • {config} (table): copy of the table that was passed by the\n                    user to |vim.lsp.start_client()|.\n                  • {server_capabilities} (table): Response from the server\n                    sent on `initialize` describing the server's capabilities.\n                  • {resolved_capabilities} (table): Normalized table of\n                    capabilities that we have detected based on the initialize\n                    response from the server in `server_capabilities` .",
   "argsStr": "",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "client_is_stopped",
   "description": "                Checks whether a client is stopped.\n\n                Parameters: ~\n                    {client_id}  (Number)\n\n                Return: ~\n                    true if client is stopped, false otherwise.",
   "argsStr": "{client_id}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "flush",
   "description": "                TODO: Documentation",
   "argsStr": "{client}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "get_active_clients",
   "description": "                Gets all active clients.\n\n                Return: ~\n                    Table of |vim.lsp.client| objects",
   "argsStr": "",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "get_buffers_by_client_id",
   "description": "                Parameters: ~\n                    {client_id}  client id\n\n                Return: ~\n                    list of buffer ids",
   "argsStr": "{client_id}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "get_client_by_id",
   "description": "                Gets a client by id, or nil if the id is invalid. The returned\n                client may not yet be fully initialized.\n\n                Parameters: ~\n                    {client_id}  client id number\n\n                Return: ~\n                    |vim.lsp.client| object, or nil",
   "argsStr": "{client_id}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "get_log_path",
   "description": "                Gets the path of the logfile used by the LSP client.\n\n                Return: ~\n                    (String) Path to logfile.",
   "argsStr": "",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "omnifunc",
   "description": "                Implements 'omnifunc' compatible LSP completion.\n\n                Parameters: ~\n                    {findstart}  0 or 1, decides behavior\n                    {base}       If findstart=0, text to match against\n\n                Return: ~\n                    (number) Decided by`findstart`:\n                    • findstart=0: column where the completion starts, or -2\n                      or -3\n                    • findstart=1: list of matches (actually just calls\n                      |complete()|)\n\n                See also: ~\n                    |complete-functions|\n                    |complete-items|\n                    |CompleteDone|",
   "argsStr": "{findstart}, {base}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "prepare",
   "description": "                TODO: Documentation",
   "argsStr": "{bufnr}, {firstline}, {new_lastline}, {changedtick}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "reset",
   "description": "                TODO: Documentation",
   "argsStr": "{client_id}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "reset_buf",
   "description": "                TODO: Documentation",
   "argsStr": "{client}, {bufnr}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "set_log_level",
   "description": "                Sets the global log level for LSP logging.\n\n                Levels by name: \"trace\", \"debug\", \"info\", \"warn\", \"error\"\n                Level numbers begin with \"trace\" at 0\n\n                Use `lsp.log_levels` for reverse lookup.\n\n                Parameters: ~\n                    {level}  [number|string] the case insensitive level name\n                             or number\n\n                See also: ~\n                    |vim.lsp.log_levels|",
   "argsStr": "{level}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "start_client",
   "description": "                Starts and initializes a client with the given configuration.\n\n                Parameters `cmd` and `root_dir` are required.\n\n                The following parameters describe fields in the {config}\n                table.\n\n                Parameters: ~\n                    {root_dir}           (string) Directory where the LSP\n                                         server will base its rootUri on\n                                         initialization.\n                    {cmd}                (required, string or list treated\n                                         like |jobstart()|) Base command that\n                                         initiates the LSP client.\n                    {cmd_cwd}            (string, default=|getcwd()|)\n                                         Directory to launch the `cmd`\n                                         process. Not related to `root_dir` .\n                    {cmd_env}            (table) Environment flags to pass to\n                                         the LSP on spawn. Can be specified\n                                         using keys like a map or as a list\n                                         with `k=v` pairs or both. Non-string values are\n                                         coerced to string. Example: >\n\n                 { \"PRODUCTION=true\"; \"TEST=123\"; PORT = 8080; HOST = \"0.0.0.0\"; }\n<\n                    {capabilities}       Map overriding the default\n                                         capabilities defined by\n                                         |vim.lsp.protocol.make_client_capabilities()|,\n                                         passed to the language server on\n                                         initialization. Hint: use\n                                         make_client_capabilities() and modify\n                                         its result.\n                                         • Note: To send an empty dictionary\n                                           use\n                                           `{[vim.type_idx]=vim.types.dictionary}`\n                                           , else it will be encoded as an\n                                           array.\n                    {handlers}           Map of language server method names\n                                         to |lsp-handler|\n                    {settings}           Map with language server specific\n                                         settings. These are returned to the\n                                         language server if requested via\n                                         `workspace/configuration` . Keys are\n                                         case-sensitive.\n                    {init_options}       Values to pass in the initialization\n                                         request as `initializationOptions` .\n                                         See `initialize` in the LSP spec.\n                    {name}               (string, default=client-id) Name in\n                                         log messages.\n                    {workspace_folders}  (table) List of workspace folders\n                                         passed to the language server.\n                                         Defaults to root_dir if not set. See\n                                         `workspaceFolders` in the LSP spec\n                    {get_language_id}    function(bufnr, filetype) -> language\n                                         ID as string. Defaults to the\n                                         filetype.\n                    {offset_encoding}    (default=\"utf-16\") One of \"utf-8\",\n                                         \"utf-16\", or \"utf-32\" which is the\n                                         encoding that the LSP server expects.\n                                         Client does not verify this is\n                                         correct.\n                    {on_error}           Callback with parameters (code, ...),\n                                         invoked when the client operation\n                                         throws an error. `code` is a number\n                                         describing the error. Other arguments\n                                         may be passed depending on the error\n                                         kind. See |vim.lsp.client_errors| for\n                                         possible errors. Use\n                                         `vim.lsp.client_errors[code]` to get\n                                         human-friendly name.\n                    {before_init}        Callback with parameters\n                                         (initialize_params, config) invoked\n                                         before the LSP \"initialize\" phase,\n                                         where `params` contains the\n                                         parameters being sent to the server\n                                         and `config` is the config that was\n                                         passed to |vim.lsp.start_client()|.\n                                         You can use this to modify parameters\n                                         before they are sent.\n                    {on_init}            Callback (client, initialize_result)\n                                         invoked after LSP \"initialize\", where\n                                         `result` is a table of `capabilities`\n                                         and anything else the server may\n                                         send. For example, clangd sends\n                                         `initialize_result.offsetEncoding` if\n                                         `capabilities.offsetEncoding` was\n                                         sent to it. You can only modify the\n                                         `client.offset_encoding` here before\n                                         any notifications are sent. Most\n                                         language servers expect to be sent\n                                         client specified settings after\n                                         initialization. Neovim does not make\n                                         this assumption. A\n                                         `workspace/didChangeConfiguration`\n                                         notification should be sent to the\n                                         server during on_init.\n                    {on_exit}            Callback (code, signal, client_id)\n                                         invoked on client exit.\n                                         • code: exit code of the process\n                                         • signal: number describing the\n                                           signal used to terminate (if any)\n                                         • client_id: client handle\n                    {on_attach}          Callback (client, bufnr) invoked when\n                                         client attaches to a buffer.\n                    {trace}              \"off\" | \"messages\" | \"verbose\" | nil\n                                         passed directly to the language\n                                         server in the initialize request.\n                                         Invalid/empty values will default to\n                                         \"off\"\n                    {flags}              A table with flags for the client.\n                                         The current (experimental) flags are:\n                                         • allow_incremental_sync (bool,\n                                           default true): Allow using\n                                           incremental sync for buffer edits\n                                         • debounce_text_changes (number,\n                                           default nil): Debounce didChange\n                                           notifications to the server by the\n                                           given number in milliseconds. No\n                                           debounce occurs if nil\n\n                Return: ~\n                    Client id. |vim.lsp.get_client_by_id()| Note: client may\n                    not be fully initialized. Use `on_init` to do any actions\n                    once the client has been initialized.",
   "argsStr": "{config}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "stop_client",
   "description": "                Stops a client(s).\n\n                You can also use the `stop()` function on a |vim.lsp.client|\n                object. To stop all clients:\n>\n\n    vim.lsp.stop_client(vim.lsp.get_active_clients())\n<\n\n                By default asks the server to shutdown, unless stop was\n                requested already for this client, then force-shutdown is\n                attempted.\n\n                Parameters: ~\n                    {client_id}  client id or |vim.lsp.client| object, or list\n                                 thereof\n                    {force}      boolean (optional) shutdown forcefully",
   "argsStr": "{client_id}, {force}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "with",
   "description": "                Function to manage overriding defaults for LSP handlers.\n\n                Parameters: ~\n                    {handler}          (function) See |lsp-handler|\n                    {override_config}  (table) Table containing the keys to\n                                       override behavior of the {handler}",
   "argsStr": "{handler}, {override_config}",
   "returnType": "any"
  }
 ]
}