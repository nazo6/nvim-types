{
 "leftTitle": "Window Functions",
 "rightTitle": "api-window",
 "description": "",
 "data": [
  {
   "type": "func",
   "name": "nvim_win_close",
   "description": "                Closes the window (like |:close| with a |window-ID|).\n\n                Attributes: ~\n                    not allowed when |textlock| is active\n\n                Parameters: ~\n                    {window}  Window handle, or 0 for current window\n                    {force}   Behave like `:close!` The last window of a\n                              buffer with unwritten changes can be closed. The\n                              buffer will become hidden, even if 'hidden' is\n                              not set.",
   "argsStr": "{window}, {force}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "nvim_win_del_var",
   "description": "                Removes a window-scoped (w:) variable\n\n                Parameters: ~\n                    {window}  Window handle, or 0 for current window\n                    {name}    Variable name",
   "argsStr": "{window}, {name}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "nvim_win_get_buf",
   "description": "                Gets the current buffer in a window\n\n                Parameters: ~\n                    {window}  Window handle, or 0 for current window\n\n                Return: ~\n                    Buffer handle",
   "argsStr": "{window}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "nvim_win_get_config",
   "description": "                Gets window configuration.\n\n                The returned value may be given to |nvim_open_win()|.\n\n                `relative` is empty for normal windows.\n\n                Parameters: ~\n                    {window}  Window handle, or 0 for current window\n\n                Return: ~\n                    Map defining the window configuration, see\n                    |nvim_open_win()|",
   "argsStr": "{window}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "nvim_win_get_cursor",
   "description": "                Gets the (1,0)-indexed cursor position in the window.\n                |api-indexing|\n\n                Parameters: ~\n                    {window}  Window handle, or 0 for current window\n\n                Return: ~\n                    (row, col) tuple",
   "argsStr": "{window}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "nvim_win_get_height",
   "description": "                Gets the window height\n\n                Parameters: ~\n                    {window}  Window handle, or 0 for current window\n\n                Return: ~\n                    Height as a count of rows",
   "argsStr": "{window}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "nvim_win_get_number",
   "description": "                Gets the window number\n\n                Parameters: ~\n                    {window}  Window handle, or 0 for current window\n\n                Return: ~\n                    Window number",
   "argsStr": "{window}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "nvim_win_get_option",
   "description": "                Gets a window option value\n\n                Parameters: ~\n                    {window}  Window handle, or 0 for current window\n                    {name}    Option name\n\n                Return: ~\n                    Option value",
   "argsStr": "{window}, {name}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "nvim_win_get_position",
   "description": "                Gets the window position in display cells. First position is\n                zero.\n\n                Parameters: ~\n                    {window}  Window handle, or 0 for current window\n\n                Return: ~\n                    (row, col) tuple with the window position",
   "argsStr": "{window}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "nvim_win_get_tabpage",
   "description": "                Gets the window tabpage\n\n                Parameters: ~\n                    {window}  Window handle, or 0 for current window\n\n                Return: ~\n                    Tabpage that contains the window",
   "argsStr": "{window}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "nvim_win_get_var",
   "description": "                Gets a window-scoped (w:) variable\n\n                Parameters: ~\n                    {window}  Window handle, or 0 for current window\n                    {name}    Variable name\n\n                Return: ~\n                    Variable value",
   "argsStr": "{window}, {name}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "nvim_win_get_width",
   "description": "                Gets the window width\n\n                Parameters: ~\n                    {window}  Window handle, or 0 for current window\n\n                Return: ~\n                    Width as a count of columns",
   "argsStr": "{window}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "nvim_win_is_valid",
   "description": "                Checks if a window is valid\n\n                Parameters: ~\n                    {window}  Window handle, or 0 for current window\n\n                Return: ~\n                    true if the window is valid, false otherwise",
   "argsStr": "{window}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "nvim_win_set_buf",
   "description": "                Sets the current buffer in a window, without side-effects\n\n                Attributes: ~\n                    not allowed when |textlock| is active\n\n                Parameters: ~\n                    {window}  Window handle, or 0 for current window\n                    {buffer}  Buffer handle",
   "argsStr": "{window}, {buffer}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "nvim_win_set_config",
   "description": "                Configures window layout. Currently only for floating and\n                external windows (including changing a split window to those\n                layouts).\n\n                When reconfiguring a floating window, absent option keys will\n                not be changed. `row` / `col` and `relative` must be\n                reconfigured together.\n\n                Parameters: ~\n                    {window}  Window handle, or 0 for current window\n                    {config}  Map defining the window configuration, see\n                              |nvim_open_win()|\n\n                See also: ~\n                    |nvim_open_win()|",
   "argsStr": "{window}, {config}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "nvim_win_set_cursor",
   "description": "                Sets the (1,0)-indexed cursor position in the window.\n                |api-indexing|\n\n                Parameters: ~\n                    {window}  Window handle, or 0 for current window\n                    {pos}     (row, col) tuple representing the new position",
   "argsStr": "{window}, {pos}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "nvim_win_set_height",
   "description": "                Sets the window height. This will only succeed if the screen\n                is split horizontally.\n\n                Parameters: ~\n                    {window}  Window handle, or 0 for current window\n                    {height}  Height as a count of rows",
   "argsStr": "{window}, {height}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "nvim_win_set_option",
   "description": "                Sets a window option value. Passing 'nil' as value deletes the\n                option(only works if there's a global fallback)\n\n                Parameters: ~\n                    {window}  Window handle, or 0 for current window\n                    {name}    Option name\n                    {value}   Option value",
   "argsStr": "{window}, {name}, {value}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "nvim_win_set_var",
   "description": "                Sets a window-scoped (w:) variable\n\n                Parameters: ~\n                    {window}  Window handle, or 0 for current window\n                    {name}    Variable name\n                    {value}   Variable value",
   "argsStr": "{window}, {name}, {value}",
   "returnType": "any"
  },
  {
   "type": "func",
   "name": "nvim_win_set_width",
   "description": "                Sets the window width. This will only succeed if the screen is\n                split vertically.\n\n                Parameters: ~\n                    {window}  Window handle, or 0 for current window\n                    {width}   Width as a count of columns",
   "argsStr": "{window}, {width}",
   "returnType": "any"
  }
 ]
}